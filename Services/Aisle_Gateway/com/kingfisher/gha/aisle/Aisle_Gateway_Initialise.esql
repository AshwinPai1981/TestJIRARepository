BROKER SCHEMA com.kingfisher.gha.aisle

CREATE COMPUTE MODULE Aisle_Gateway_Initialise
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE DT_StartDate	DATE;
		DECLARE DT_EndDate		DATE;
		
		SET OutputRoot.Properties 		= 	InputRoot.Properties;

		-- Store the HTTP RequestIdentifier
		SET Environment.Store.requestID = 	InputLocalEnvironment.Destination.HTTP.RequestIdentifier;

		-- Store the method
		SET Environment.Store.method 	= 	InputLocalEnvironment.HTTP.Input.RequestLine.Method;
		
		-- For REST the last section of the URI should name the target object this action is to be performed on
		SET Environment.ReqFromURI 		= 	'False';

		DECLARE targObj CHARACTER;
		SET targObj = SUBSTRING(InputLocalEnvironment.HTTP.Input.RequestLine.RequestURI After '/');
		SET targObj = SUBSTRING(targObj After '/');

		-- Tidy and save the title in the URL.
		SET targObj = REPLACE(targObj,'%20',' ');
		IF COALESCE(targObj, '') <> '' THEN
			SET Environment.Store.aisleNumber = targObj;
			SET Environment.ReqFromURI = 'True';
		END IF;
        
        -- checking if the user sends any additional parameter to process or not
        IF (EXISTS(InputLocalEnvironment.HTTP.Input.QueryString[])) THEN
			SET Environment.QueryString.aisleNumber 			= 	InputLocalEnvironment.HTTP.Input.QueryString.aisleNumber;
			SET Environment.QueryString.storeCode				= 	InputLocalEnvironment.HTTP.Input.QueryString.storeCode;
			SET Environment.QueryString.partialAisleNumber		=	InputLocalEnvironment.HTTP.Input.QueryString.partialAisleNumber;
			SET Environment.QueryString.deleteKey 				= 	InputLocalEnvironment.HTTP.Input.QueryString.deleteKey;
			SET Environment.QueryString.storageType				= 	InputLocalEnvironment.HTTP.Input.QueryString.storageType;
			SET Environment.QueryString.action					=   UPPER(InputLocalEnvironment.HTTP.Input.QueryString.action);
		END IF;
		
       /*
		 * Retrive the MetaData information from HTTPHeader.
		 * Pass the MetaData information to data service flow 
		*/
		
		-- Map the metadata field elements to the JSON message
		
		DECLARE oRefProp REFERENCE TO OutputRoot.JSON.Data.properties;
	
		CREATE FIELD OutputRoot.JSON.Data;
		CREATE FIELD OutputRoot.JSON.Data.Class IDENTITY (JSON.Array)Class; 
		SET OutputRoot.JSON.Data.Class.Item[1] VALUE = 'Metadata';
        CREATE FIELD OutputRoot.JSON.Data.properties AS oRefProp;
        
        /*SET oRefProp.opco = InputRoot.HTTPInputHeader.Opco;
        SET oRefProp.fullStoreCode = InputRoot.HTTPInputHeader.Fullstorecode;
        SET oRefProp.userId = InputRoot.HTTPInputHeader.Userid;
        SET oRefProp.deviceId = InputRoot.HTTPInputHeader.Deviceid;
        SET oRefProp.deviceType = InputRoot.HTTPInputHeader.Devicetype;
        SET oRefProp.clientIpAddress = InputRoot.HTTPInputHeader.Clientipaddress;
        SET oRefProp.processName = InputRoot.HTTPInputHeader.Processname;
        SET oRefProp.interfaceName = InputRoot.HTTPInputHeader.Interfacename;
        SET oRefProp.sourceApplication = InputRoot.HTTPInputHeader.Sourceapplication;
        SET oRefProp.requestDateTime = InputRoot.HTTPInputHeader.Requestdatetime;
        SET oRefProp.messageKey = InputRoot.HTTPInputHeader.Messagekey;
        SET oRefProp.requestUuid = InputRoot.HTTPInputHeader.Requestuuid; 
        SET oRefProp.globalTransactionId = InputRoot.HTTPInputHeader.Globaltransactionid;*/
        
        SET oRefProp."opco" 					= InputRoot.HTTPInputHeader."Kits-Opco";
        SET oRefProp."fullStoreCode"			= InputRoot.HTTPInputHeader."Kits-Store-Code";
        SET oRefProp."userId"					= InputRoot.HTTPInputHeader."Kits-User-Id";
        SET oRefProp."deviceId"				    = InputRoot.HTTPInputHeader."Kits-Device-Id";
        SET oRefProp."deviceType"				= InputRoot.HTTPInputHeader."Kits-Device-Type";
        SET oRefProp."clientIpAddress"		    = InputRoot.HTTPInputHeader."Kits-Client-Ip-Address";
        SET oRefProp."processName" 			    = InputRoot.HTTPInputHeader."Kits-Process-Name";
        SET oRefProp."interfaceName" 			= 'Aisle';
        SET oRefProp."sourceApplication" 		= InputRoot.HTTPInputHeader."Kits-Application-Name";
        SET oRefProp."requestDateTime" 		    = InputRoot.HTTPInputHeader."Kits-Request-Date-Time";
        SET oRefProp."messageKey"				= InputRoot.HTTPInputHeader."Kits-Message-Key";
        SET oRefProp."requestUuid" 				= InputRoot.HTTPInputHeader."Kits-Request-Id";
        SET oRefProp."globalTransactionId" 		= InputRoot.HTTPInputHeader."Kits-Global-Id";
        
		SET Environment.MetaData 					= 	OutputRoot.JSON.Data;
		
		-- Removing the metadata json message
		SET OutputRoot.JSON 			= 	NULL;
		
		IF(COALESCE(Environment.Store.method) <> '' AND (UPPER(Environment.Store.method) = 'POST' OR UPPER(Environment.Store.method) = 'GET')) THEN
		IF(UPPER(Environment.Store.method) <> 'GET' AND UPPER(Environment.Store.method) <> 'POST' AND UPPER(Environment.Store.method) <> 'PUT' AND UPPER(Environment.Store.method) <> 'DELETE') THEN
				THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Method Not Allowed','405');
		   		RETURN FALSE;
		END IF;
		ELSE
	        	THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Not Implemented','501');
		   		RETURN FALSE;
		END IF;	 
		
		IF Environment.QueryString.action NOT IN ('READ_AISLE','CREATE_AISLE','UPDATE_AISLE','DELETE_AISLE') THEN
			THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - Invalid action','400');
			RETURN FALSE;
		END IF;
		
		IF (UPPER(Environment.Store.method) = 'GET') THEN
			
--			IF Environment.ReqFromURI = 'False' THEN 
--			
--				IF COALESCE(Environment.QueryString.storeCode,'') = '' OR COALESCE(Environment.QueryString.action,'')= '' OR COALESCE(Environment.QueryString.action,'') <>  'READ_AISLE' THEN
--					THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - Invalid storeCode or action','400');
--					RETURN FALSE;
--				ELSEIF COALESCE(Environment.QueryString.partialAisleNumber,'') <> '' AND COALESCE(Environment.QueryString.aisleNumber,'') <> '' THEN
--					THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - both partialAisleNumber and aisleNumber cannot co-exist','400');
--					RETURN FALSE;
--				ELSEIF CONTAINS(Environment.QueryString.partialAisleNumber,'*') = TRUE THEN
--					THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - no special character is allowed in partialAisleNumber','400');
--					RETURN FALSE;
--		        END IF;
--				
--			ELSE
--				
--				IF COALESCE(Environment.QueryString.storeCode,'') = '' OR COALESCE(Environment.QueryString.action,'')= '' THEN
--					THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - both storeCode and action are mandatory','400');
--					RETURN FALSE;
--				ELSEIF (COALESCE(Environment.QueryString.partialAisleNumber,'') <> '' OR COALESCE(Environment.QueryString.aisleNumber,'') <> '') THEN
--					THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - both partialAisleNumber and aisleNumber cannot co-exist','400');
--					RETURN FALSE;
--		        END IF;
--        
--       		END IF;
				IF COALESCE(Environment.QueryString.storeCode,'') = '' THEN
					THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - Invalid storeCode','400');
					RETURN FALSE;
					
				ELSEIF COALESCE(Environment.QueryString.action,'') <>  'READ_AISLE' THEN
					THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - Invalid action','400');
					
				ELSEIF COALESCE(Environment.QueryString.partialAisleNumber,'') <> '' AND COALESCE(Environment.QueryString.aisleNumber,'') <> '' THEN
					THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - both partialAisleNumber and aisleNumber cannot co-exist','400');
					RETURN FALSE;
				END IF;
				
				IF Environment.ReqFromURI = 'False' THEN 
			
				IF CONTAINS(Environment.QueryString.partialAisleNumber,'*') = TRUE THEN
					THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - no special character is allowed in partialAisleNumber','400');
					RETURN FALSE;
		        END IF;
				
--			ELSE
--				
--				IF COALESCE(Environment.QueryString.storeCode,'') = '' OR COALESCE(Environment.QueryString.action,'')= '' THEN
--					THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - both storeCode and action are mandatory','400');
--					RETURN FALSE;
--				ELSEIF (COALESCE(Environment.QueryString.partialAisleNumber,'') <> '' OR COALESCE(Environment.QueryString.aisleNumber,'') <> '') THEN
--					THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - both partialAisleNumber and aisleNumber cannot co-exist','400');
--					RETURN FALSE;
--		        END IF;
        
       			END IF;
       		
		ELSEIF (UPPER(Environment.Store.method) = 'POST') THEN
			
			IF COALESCE(Environment.QueryString.action,'')= '' OR COALESCE(Environment.QueryString.action,'') =  'READ_AISLE' THEN
	        	THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - Invalid action','400');
	        END IF;
	               		
		END IF;		
		
		SET OutputRoot.BLOB.BLOB = InputRoot.BLOB.BLOB;
		
		RETURN TRUE;
	
	END;
	
END MODULE;

