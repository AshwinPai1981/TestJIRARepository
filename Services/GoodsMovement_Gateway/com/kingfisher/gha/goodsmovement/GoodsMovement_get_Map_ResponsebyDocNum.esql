BROKER SCHEMA com.kingfisher.gha.goodsmovement

/****************************************************************************************************
* COPYRIGHT. <KINGFISHER INFORMATION TECHNOLOGY SERVICES 2012> ALL RIGHTS RESERVED. NO PART OF THIS *
* SOURCE CODE MAY BE REPRODUCED, STORED IN A RETRIEVAL SYSTEM, OR TRANSMITTED,IN ANY 				*
* FORM BY ANY MEANS, ELECTRONIC, MECHANICAL, PHOTOCOPYING, RECORDING OR OTHERWISE, 					*
* WITHOUT THE PRIOR WRITTEN PERMISSION OF <KINGFISHER INFORMATION TECHNOLOGY SERVICES>. 			*
****************************************************************************************************/
/****************************************************************************************************
* Node Name 				: Map Response										 					*
* Interface Id 				: 234.5																	*
* Interface Name 			: GoodsMovement_Gateway	 												*
* Message Flow 				: GoodsMovement_GetByDocNum												*
* Message Flow Description 	: The primary function of this message flow/service is to accept the 	*
							  JSON canonical request from the gateway flow, create SOAP request for	* 
							  SAP service call, receive the SAP response back, and send it back to	* 
							  Gateway flow in a JSON structured way. 								*
* Module Name 			   : com.kingfisher.gha.goodsmovement.GoodsMovement_get_Map_ResponsebyDocNum*
* Description 				: The module creates the JSON response message from the SAP service		*
							  response and sends it back to the gateway flow.						*
*																									*
* Version 	Date 			Author 				Description 										*
* ======= 	========= 		========== 			=================== 								*
* 1.00		December-2014 	Debraj Sengupta		The initial version. 								*
****************************************************************************************************/

CREATE COMPUTE MODULE GoodsMovement_get_Map_ResponsebyDocNum
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		
		SET OutputRoot.Properties = InputRoot.Properties;
		
		-- Restore the Msg ID, reply queue,metadata, request identifier etc from Enviroment and set it to MQRFH2 header for Gateway service.
		SET OutputRoot.MQMD = Environment.Store.MQMD;
		SET OutputRoot.MQRFH2 = Environment.Store.MQRFH2;
	
		SET OutputRoot.MQMD.MsgId = Environment.Store.MsgID;
        SET OutputRoot.MQMD.ReplyToQ = Environment.Store.ReplyToQ;
	    SET OutputRoot.MQRFH2.usr.MetaData = Environment.Store.MetaData;
        SET OutputRoot.MQRFH2.usr.requestID = Environment.Store.requestID;       
        SET OutputRoot.MQRFH2.usr.RequestDoc = Environment.Store.RequestDoc;
        
	    -- Create JSON output response
	    
		DECLARE iRef REFERENCE TO InputRoot.XMLNSC.NS_n1:GoodsMovementERPByIDResponse_sync;
		--DECLARE iRef_Items REFERENCE TO InputRoot.XMLNSC.NS_urn:GoodsmvtGetitemsResponse.GoodsmvtItems;
		DECLARE iRef_Headers REFERENCE TO iRef.GoodsMovement;
		DECLARE oRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE oRefClass REFERENCE TO OutputRoot.JSON.Data.Class;
		DECLARE oRefProp REFERENCE TO OutputRoot.JSON.Data.properties;
		
		-- Check for any error returned by SAP 
		IF EXISTS(iRef.GoodsMovement[]) = false THEN
			
			DECLARE oRefProp REFERENCE TO OutputRoot.JSON.Data.properties;
			 -- Map the JSON error response
			CREATE FIELD OutputRoot.JSON.Data AS oRef;
	        CREATE FIELD oRef.Class IDENTITY (JSON.Array)Class;
			CREATE LASTCHILD OF oRef.Class TYPE NameValue NAME 'Item' VALUE 'Response';
	        CREATE FIELD OutputRoot.JSON.Data.properties AS oRefProp;
	        
	        SET oRefProp.type = 'ERROR';
			
			DECLARE oRefInfo REFERENCE TO oRefProp.info;
	        CREATE FIELD oRefProp.info AS oRefInfo IDENTITY (JSON.Array)info;
	        
	        		SET oRefInfo.Item[1].serviceName = MessageFlowLabel;
	           		SET oRefInfo.Item[1].statusCode = '404';	
			   		SET oRefInfo.Item[1].statusMessage = iRef.Return.item.Message;
			   		
		ELSE 
			DECLARE IN_COUNT INTEGER 0;
			FOR source AS iRef.GoodsMovement[] DO
				IF source.Item[1].GoodsMovementTypeCode = '303' THEN
					SET IN_COUNT = IN_COUNT + 1;
				END IF;	
			END FOR;
			
			IF IN_COUNT = 0 THEN
				THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Not a IBST Out document. Service only supports IBSTOut Document');
				RETURN FALSE;
			END IF;
			
			IF IN_COUNT > 1 THEN
				THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Found multiple documents with same document number');
				RETURN FALSE;
			END IF;
						 
			DECLARE movCount INTEGER 1;			 
			FOR source AS iRef.GoodsMovement[] DO
				IF source.Item[movCount].GoodsMovementTypeCode = '303' THEN						 
					-- Map the JSON success response
					CREATE FIELD OutputRoot.JSON.Data AS oRef;
					CREATE FIELD oRef.Class AS oRefClass IDENTITY (JSON.Array)Class;
					SET oRefClass.Item[1] VALUE = 'GoodsMovement';
					CREATE FIELD oRef.properties AS oRefProp;
					
					DECLARE CH_PostingDate CHARACTER source.PostingDate;
					DECLARE CH_DocumentNumber CHARACTER source.ID;
					DECLARE CH_PostingYear CHARACTER source.Year;
					DECLARE CH_FromStoreCode CHARACTER;
					DECLARE CH_FromStoreName CHARACTER;
					
					SET oRefProp.postingDate = CH_PostingDate;
					
					
					DECLARE iRef_item REFERENCE TO source.Item;
					
					X: WHILE LASTMOVE(iRef_item) DO 
							IF iRef_item.DebitCreditCode = 2 THEN
								SET CH_FromStoreCode = iRef_item.PlantID;
								SET CH_FromStoreName = iRef_item.PlantName;
								LEAVE X;
							END IF;
							MOVE iRef_item NEXTSIBLING REPEAT TYPE NAME;
					   END WHILE;				
					SET oRefProp.storeCode = CH_FromStoreCode;
					SET oRefProp.description = CH_FromStoreName;
					SET oRefProp.documentNumber = CH_DocumentNumber;
					
					DECLARE oRefItem REFERENCE TO oRefProp.movementItem;
					CREATE FIELD oRefProp.movementItem AS oRefItem IDENTITY (JSON.Array)movementItem;
					
					DECLARE count INTEGER 1;
					FOR source_item AS source.Item[] DO
						IF source_item.DebitCreditCode <> 2 THEN
							SET oRefItem.Item[count].productNumber = source_item.Material.InternalID;
							SET oRefItem.Item[count].quantity = CAST(source_item.Quantity.EntryQuantity AS DECIMAL);
							SET oRefItem.Item[count].quantityUomCode = source_item.Quantity.EntryQuantity.(XMLNSC.Attribute)unitCode;
							SET oRefItem.Item[count].inventoryUsabilityCode = source_item.InventoryUsabilityCode;
							SET oRefItem.Item[count].typeCode = source_item.GoodsMovementTypeCode;
							SET oRefItem.Item[count].toStoreCode = source_item.PlantID;
							
							SET count = count + 1;
						END IF;
						
					END FOR;
				END IF;
				SET movCount = movCount + 1;
			 END FOR;
			END IF;		
		RETURN TRUE;

	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
