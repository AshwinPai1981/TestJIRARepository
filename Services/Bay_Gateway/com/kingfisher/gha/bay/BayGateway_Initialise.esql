BROKER SCHEMA com.kingfisher.gha.bay


CREATE COMPUTE MODULE BayGateway_Initialise
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;

		-- Store the HTTP RequestIdentifier
		SET Environment.Store.requestID = InputLocalEnvironment.Destination.HTTP.RequestIdentifier;

		-- Store the method
		SET Environment.Store.method = InputLocalEnvironment.HTTP.Input.RequestLine.Method;
		
		DECLARE targObj CHARACTER;
		SET targObj = SUBSTRING(InputLocalEnvironment.HTTP.Input.RequestLine.RequestURI After '/');
		SET targObj = SUBSTRING(targObj After '/');

		-- Tidy and save the title in the URL.
		SET targObj = REPLACE(targObj,'%20',' ');
		IF COALESCE(targObj, '') <> '' THEN
			SET Environment.Store.bay = targObj;
			SET Environment.Store.bayFromURI = TRUE;
		ELSE 
			SET Environment.Store.bayFromURI = FALSE;	
		END IF;

		IF (EXISTS(InputLocalEnvironment.HTTP.Input.QueryString[])) THEN
			SET Environment.QueryString.storeCode 	= InputLocalEnvironment.HTTP.Input.QueryString.storeCode;
			SET Environment.QueryString.action		= UPPER(InputLocalEnvironment.HTTP.Input.QueryString.action);
			SET Environment.QueryString.aisleNumber	= InputLocalEnvironment.HTTP.Input.QueryString.aisleNumber;
			SET Environment.QueryString.bayNumber   = InputLocalEnvironment.HTTP.Input.QueryString.bayNumber;
		END IF;
		
		/*
		 * Retrive the MetaData information from HTTPHeader.
		 * Pass the MetaData information to data service flow 
		*/
			
		-- Map the metadata field elements to the JSON message
		
		DECLARE oRefProp REFERENCE TO OutputRoot.JSON.Data.properties;
		CREATE FIELD OutputRoot.JSON.Data;
		CREATE FIELD OutputRoot.JSON.Data.Class IDENTITY (JSON.Array)Class; 
		SET OutputRoot.JSON.Data.Class.Item[1] VALUE = 'Metadata';
        CREATE FIELD OutputRoot.JSON.Data.properties AS oRefProp;
        
        /*SET oRefProp.opco = InputRoot.HTTPInputHeader.Opco;
        SET oRefProp.fullStoreCode = InputRoot.HTTPInputHeader.Fullstorecode;
        SET oRefProp.userId = InputRoot.HTTPInputHeader.Userid;
        SET oRefProp.deviceId = InputRoot.HTTPInputHeader.Deviceid;
        SET oRefProp.deviceType = InputRoot.HTTPInputHeader.Devicetype;
        SET oRefProp.clientIpAddress = InputRoot.HTTPInputHeader.Clientipaddress;
        SET oRefProp.processName = InputRoot.HTTPInputHeader.Processname;
        SET oRefProp.interfaceName = InputRoot.HTTPInputHeader.Interfacename;
        SET oRefProp.sourceApplication = InputRoot.HTTPInputHeader.Sourceapplication;
        SET oRefProp.requestDateTime = InputRoot.HTTPInputHeader.Requestdatetime;
        SET oRefProp.messageKey = InputRoot.HTTPInputHeader.Messagekey;
        SET oRefProp.requestUuid = InputRoot.HTTPInputHeader.Requestuuid; */
        
          SET oRefProp."opco" 					= InputRoot.HTTPInputHeader."Kits-Opco";
        SET oRefProp."fullStoreCode"			= InputRoot.HTTPInputHeader."Kits-Store-Code";
        SET oRefProp."userId"					= InputRoot.HTTPInputHeader."Kits-User-Id";
        SET oRefProp."deviceId"				    = InputRoot.HTTPInputHeader."Kits-Device-Id";
        SET oRefProp."deviceType"				= InputRoot.HTTPInputHeader."Kits-Device-Type";
        SET oRefProp."clientIpAddress"		    = InputRoot.HTTPInputHeader."Kits-Client-Ip-Address";
        SET oRefProp."processName" 			    = InputRoot.HTTPInputHeader."Kits-Process-Name";
        SET oRefProp."interfaceName" 			= 'Bay';
        SET oRefProp."sourceApplication" 		= InputRoot.HTTPInputHeader."Kits-Application-Name";
        SET oRefProp."requestDateTime" 		    = InputRoot.HTTPInputHeader."Kits-Request-Date-Time";
        SET oRefProp."messageKey"				= InputRoot.HTTPInputHeader."Kits-Message-Key";
        SET oRefProp."requestUuid" 				= InputRoot.HTTPInputHeader."Kits-Request-Id";
        SET oRefProp."globalTransactionId" 		= InputRoot.HTTPInputHeader."Kits-Global-Id";
        
		SET Environment.MetaData = OutputRoot.JSON.Data;
		
		-- Removing the metadata json message
		SET OutputRoot.JSON = NULL;
		
		IF COALESCE(Environment.QueryString.action,'')='' THEN
			THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - action parameter is mandatory','400');
		END IF;
		
		IF UPPER(Environment.Store.method) = 'GET' AND COALESCE(Environment.Store.bay,'')<>'' AND (COALESCE(Environment.QueryString.aisleNumber,'')<>'' OR COALESCE(Environment.QueryString.bayNumber,'')<>'')THEN
			THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - aisle, bay cannot exist on both URI and query parameters','400');
		END IF;	
		
		IF UPPER(Environment.Store.method) = 'GET' AND COALESCE(Environment.Store.bay,'')='' AND (COALESCE(Environment.QueryString.aisleNumber,'')<>'' AND COALESCE(Environment.QueryString.bayNumber,'')<>'') THEN
			THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - aisle, bay both cannot exist on query parameters when URI is blank','400');
		END IF;	
		
		IF COALESCE(Environment.Store.bay,'')<>'' AND LENGTH(Environment.Store.bay)<>6 THEN
				THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - BayNumber should be 6 characters long','400');
		END IF;	
			
		IF UPPER(Environment.Store.method) <> 'GET' AND UPPER(Environment.Store.method) <> 'POST' THEN
			THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - method not allowed','400');
		END IF;
		
		IF UPPER(Environment.Store.method) = 'GET' AND COALESCE(InputLocalEnvironment.HTTP.Input.QueryString.storeCode,'')='' THEN
			THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES('Bad Request - store code is mandatory','400');
		END IF;	
		
		
		SET OutputRoot.BLOB.BLOB = InputRoot.BLOB.BLOB;
		
		RETURN TRUE;
	END;
END MODULE;
