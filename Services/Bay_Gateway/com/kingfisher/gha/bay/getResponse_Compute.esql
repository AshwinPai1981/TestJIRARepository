BROKER SCHEMA com.kingfisher.gha.bay
PATH com.kingfisher.gha.common;

/*****************************************************************************************************
* COPYRIGHT. <KINGFISHER INFORMATION TECHNOLOGY SERVICES 2012> ALL RIGHTS RESERVED. NO PART OF THIS  *
* SOURCE CODE MAY BE REPRODUCED, STORED IN A RETRIEVAL SYSTEM, OR TRANSMITTED,IN ANY 				 *
* FORM BY ANY MEANS, ELECTRONIC, MECHANICAL, PHOTOCOPYING, RECORDING OR OTHERWISE, 					 *
* WITHOUT THE PRIOR WRITTEN PERMISSION OF <KINGFISHER INFORMATION TECHNOLOGY SERVICES>. 			 *
****************************************************************************************************/
/*************************************************************************************************** *
* Node Name 				: CnC_getOutputMapping											 	     *											
* Interface Id 				: 254.1																	 *								
* Interface Name 			: Bay_Gateway		 													 *							
* Message Flow 				: Bay_Gateway														     *									
* Message Flow Description 	: The primary function of this message flow/service is to send 			 *
                              C&C specific Bay response JSON to the app								 *
                              information in a store and create the JSON response                    *								
* Module Name 				: com.kingfisher.gha.bay.getResponse_Compute							 *									
* Description 				: The module sends the JSON Bay response to C&C							 *
*							  																		 *
*																									 *
* Version 	Date 			Author 				Description 										 *
* ======= 	========= 		========== 			=================== 								 *
* 1.00		30-MAR-2016 	Abhishek Ray 		Initial Version					 					 *
* 1.10      02-MAY-2016		Abhishek Ray		Using selects to generate repeating structures		 *
*****************************************************************************************************/

CREATE COMPUTE MODULE getResponse_Compute
	DECLARE CH_BROKER CHARACTER getConfigValue('BROKER_URL');
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties 	=	InputRoot.Properties;
		SET OutputRoot.MQMD 		=	InputRoot.MQMD;
		SET OutputRoot.MQRFH2 		=	InputRoot.MQRFH2;
		
		DECLARE iRef  			REFERENCE TO InputRoot.JSON.Data;
		DECLARE oRef  			REFERENCE TO OutputRoot.JSON.Data;
		DECLARE oRefProp		REFERENCE TO oRef.properties;
		DECLARE oRefEntity		REFERENCE TO oRef.entities;
		DECLARE bayFromURI      BOOLEAN InputRoot.MQRFH2.usr.bayFromURI;
		DECLARE storeCode		CHARACTER InputRoot.MQRFH2.usr.storeCode;
		DECLARE bayFilter		CHARACTER InputRoot.MQRFH2.usr.bayFilter;	
		DECLARE outCount		INTEGER 1;
		DECLARE entityCount		INTEGER 1;
		DECLARE errCount		INTEGER 1;
		DECLARE TEMP            INTEGER 0;
		DECLARE bayFound		BOOLEAN FALSE;	
		SET Environment.className = 'Bay';	
		
		
		IF iRef.Class.Item[1] = 'Response' AND iRef.properties.type = 'ERROR' THEN
			 CREATE FIELD OutputRoot.JSON.Data AS oRef;
			 CREATE FIELD oRef.Class IDENTITY (JSON.Array)Class;
			 SET oRef.Class.Item[1] VALUE = 'Response';
   	         CREATE FIELD oRef.properties AS oRefProp;
   	         SET oRefProp.type = 'ERROR';
   	         CREATE FIELD oRefProp.info IDENTITY (JSON.Array)info;
   	         FOR info AS iRef.properties.info.Item[] DO
   	         	SET oRefProp.info.Item[errCount].serviceName   = MessageFlowLabel;
				SET oRefProp.info.Item[errCount].statusCode    = info.statusCode;
				SET oRefProp.info.Item[errCount].statusMessage = info.statusMessage;
				
				SET  errCount = errCount + 1;
   	         END FOR;	
		ELSE
			-- single bay (can be from request URI or single bay number passed in query param)
			IF bayFromURI THEN
				CREATE FIELD OutputRoot.JSON.Data AS oRef;
				CREATE FIELD oRef.Class IDENTITY (JSON.Array)Class;
				SET oRef.Class.Item[1] VALUE = 'Bay';
				CREATE FIELD oRef.properties AS oRefProp;
				SET oRefProp.bayNumber 		 = iRef.Item[1].properties.bayNumber;
				SET oRefProp.aisleNumber     = iRef.Item[1].properties.aisleNumber;
				SET oRefProp.siteNumber      = iRef.Item[1].properties.siteNumber;
				
				IF COALESCE(iRef.Item[1].properties.description,'')<>'' THEN
					SET oRefProp.description = iRef.Item[1].properties.description;
				END IF;
				
			ELSE 
				CREATE FIELD OutputRoot.JSON.Data AS oRef IDENTITY (JSON.Array)Data;
					IF COALESCE(bayFilter,'')<>'' THEN
						SET TEMP = PROC_SplitByDelimiter(bayFilter,',','BAY_TO_DISPLAY',Environment);
--						FOR requiredBay AS Environment.BAY_TO_DISPLAY.ArrayOfSubString[] DO
						    SET oRef.Item[] = SELECT Environment.className AS (JSON.Array)Class.Item[1],
            			              				 I.properties.bayNumber AS properties.bayNumber,
									 				 I.properties.aisleNumber AS properties.aisleNumber,
						  			  				 I.properties.siteNumber AS properties.siteNumber,
						  			                 I.properties.description AS properties.description
						                      FROM iRef.Item[] AS I WHERE I.properties.bayNumber IN (Environment.BAY_TO_DISPLAY.ArrayOfSubString[]);  
--						END FOR;
						
						IF COALESCE(oRef.Item[1].Class.Item,'')<>'' THEN
							SET bayFound = TRUE;
						END IF;	
							
						
						
						IF bayFound = FALSE THEN
							CREATE FIELD OutputRoot.JSON.Data AS oRef;
							CREATE FIELD oRef.Class IDENTITY (JSON.Array)Class;
							SET oRef.Class.Item[1] VALUE = 'Response';
				   	        CREATE FIELD oRef.properties AS oRefProp;
				   	        SET oRefProp.type = 'ERROR';
				   	        CREATE FIELD oRefProp.info IDENTITY (JSON.Array)info;
			   	         	SET oRefProp.info.Item[1].serviceName   = MessageFlowLabel;
							SET oRefProp.info.Item[1].statusCode    = '404';
							SET oRefProp.info.Item[1].statusMessage = 'Desired aisle-bay not found';
						END IF;	
					ELSE
						SET oRef.Item[] = SELECT     Environment.className AS (JSON.Array)Class.Item[1],
            			              				 I.properties.bayNumber AS properties.bayNumber,
									 				 I.properties.aisleNumber AS properties.aisleNumber,
						  			  				 I.properties.siteNumber AS properties.siteNumber,
						  			                 I.properties.description AS properties.description
						                      FROM iRef.Item[] AS I; 	
					END IF;			 	
			END IF;
		END IF;
		SET OutputLocalEnvironment = InputLocalEnvironment;	
		RETURN TRUE;
	END;
	
	
	CREATE FUNCTION FUNC_POPULATE_RESPONSE_MULTIPLE(IN entityCount INTEGER, IN outCount INTEGER, IN storeCode CHARACTER, IN oRef REFERENCE, IN oRefProp REFERENCE, IN iRefJson REFERENCE, IN oRefEntity REFERENCE)
	BEGIN
		SET entityCount = 1;
		CREATE FIELD oRef.Item[outCount].Class IDENTITY (JSON.Array)Class;
		SET oRef.Item[outCount].Class.Item[1] VALUE = 'Bay';
		CREATE FIELD oRef.Item[outCount].properties AS oRefProp;
		SET oRefProp.bayNumber 		 = iRefJson.properties.bayNumber;
		SET oRefProp.aisleNumber     = iRefJson.properties.aisleNumber;
		SET oRefProp.siteNumber      = iRefJson.properties.siteNumber;
		IF COALESCE(iRefJson.properties.description,'')<>'' THEN
			SET oRefProp.description = iRefJson.properties.description;
		END IF;
	END;	
	
	CREATE FUNCTION FUNC_NESTED_STORE(IN refNestedStore REFERENCE, IN storeCode CHARACTER)
	BEGIN
		CREATE FIELD refNestedStore.Item[1].Class IDENTITY (JSON.Array)Class;
		SET refNestedStore.Item[1].Class.Item[1] VALUE = 'FulfilmentSite';
		CREATE FIELD refNestedStore.Item[1].rel IDENTITY (JSON.Array)rel;
		SET refNestedStore.Item[1].rel.Item[1] VALUE = 'urn:x-kingfisher:name:parent';
		
		DECLARE oRefprop REFERENCE TO refNestedStore.Item[1].properties;
		CREATE FIELD refNestedStore.Item[1].properties AS oRefprop;
		SET oRefprop.siteNumber = storeCode;
		
		DECLARE oReflink REFERENCE TO refNestedStore.Item[1].links;
		CREATE FIELD refNestedStore.Item[1].links AS oReflink IDENTITY (JSON.Array)links;
		DECLARE linkrel REFERENCE TO oReflink.Item[1].rel;
		CREATE FIELD oReflink.Item[1].rel AS linkrel IDENTITY (JSON.Array)rel;
		SET linkrel.Item[1] VALUE = 'self';
		SET oReflink.Item[1].href = CH_BROKER ||'/FulfilmentSite/' || storeCode;
	END;
END MODULE;
